lazy_new(f fn(addr) -> addr, x addr) :: addr {
    l = @alloc_heap(4);
    l[0] = 0;        # cached
    l[1] = 0;        # result
    l[2] = f as i32; # func
    l[3] = x as i32; # args
    return l;
}

lazy_get_cached(l addr) :: i32 {
    return l[0];
}

lazy_set_cached(l addr, c i32) {
    l[0] = c;
    return;
}

lazy_get_result(l addr) :: addr {
    return l[1] as addr;
}

lazy_set_result(l addr, r addr) {
    l[1] = r as i32;
    return;
}

lazy_get_func(l addr) :: fn(addr) -> addr {
    return l[2] as fn(addr) -> addr;
}

lazy_get_args(l addr) :: addr {
    return l[3] as addr;
}

lazy_force(l addr) :: addr {
    if (!lazy_get_cached(l)) {
        lazy_set_result(l, (lazy_get_func(l))(lazy_get_args(l)));
        lazy_set_cached(l, 1);
    }
    return l[1] as addr;
}

list_set(l addr, i i32, f fn(addr) -> addr, x addr) {
    l[0] = i;                     # head
    l[1] = lazy_new(f, x) as i32; # tail
    return;
}

list_new(i i32, f fn(addr) -> addr, x addr) :: addr {
    l = @alloc_heap(2);
    list_set(l, i, f, x);
    return l;
}

list_get_head(l addr) :: i32 {
    return l[0];
}

list_get_tail(l addr) :: addr {
    return lazy_force(l[1] as addr);
}

list_drop(l addr, n i32) :: addr {
    loop {
        if n == 0 {
            break 0;
        }
        l = list_get_tail(l);
        n = n - 1;
    }
    return l;
}

f0(x addr) :: addr {
    return list_new(1, f1, x);
}

f1(x addr) :: addr {
    return zip1(x, list_get_tail(x));
}

zip0(x addr) :: addr {
    a = list_get_tail(x[0] as addr);
    b = list_get_tail(x[1] as addr);
    return zip1(a, b);
}

zip1(a addr, b addr) :: addr {
    x = @alloc_heap(2);
    x[0] = a as i32;
    x[1] = b as i32;
    return list_new(list_get_head(a) + list_get_head(b), zip0, x);
}

println_i32(x i32) {
    @print_i32(x);
    @print_char(10);
    return;
}

main() {
    fibs = @alloc_heap(2);
    list_set(fibs, 0, f0, fibs);
    println_i32(list_get_head(list_drop(fibs, 46)));
    return;
}
